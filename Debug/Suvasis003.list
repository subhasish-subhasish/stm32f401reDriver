
Suvasis003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000820  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009b4  080009bc  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009b4  080009b4  000019bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009b4  080009b4  000019bc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009b4  080009bc  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009b4  080009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009b8  080009b8  000019b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009bc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009bc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ef  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040c  00000000  00000000  00002edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000032e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000db  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002980  00000000  00000000  000034fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016b6  00000000  00000000  00005e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000074c7  00000000  00000000  00007531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e9f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000041c  00000000  00000000  0000ea3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0000ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800099c 	.word	0x0800099c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800099c 	.word	0x0800099c

080001d4 <GPIO_PeriClockControl>:

#include "stm32f401re_gpio.h"

//1. enable clock using calling the macro which is deined in header file
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 80001e0:	78fb      	ldrb	r3, [r7, #3]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d157      	bne.n	8000296 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx==GPIOA)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a59      	ldr	r2, [pc, #356]	@ (8000350 <GPIO_PeriClockControl+0x17c>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d106      	bne.n	80001fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001ee:	4b59      	ldr	r3, [pc, #356]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	4a58      	ldr	r2, [pc, #352]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80001fa:	e0a3      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOB)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a56      	ldr	r2, [pc, #344]	@ (8000358 <GPIO_PeriClockControl+0x184>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d106      	bne.n	8000212 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000204:	4b53      	ldr	r3, [pc, #332]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a52      	ldr	r2, [pc, #328]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000210:	e098      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a51      	ldr	r2, [pc, #324]	@ (800035c <GPIO_PeriClockControl+0x188>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d106      	bne.n	8000228 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800021a:	4b4e      	ldr	r3, [pc, #312]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a4d      	ldr	r2, [pc, #308]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000226:	e08d      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a4d      	ldr	r2, [pc, #308]	@ (8000360 <GPIO_PeriClockControl+0x18c>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d106      	bne.n	800023e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000230:	4b48      	ldr	r3, [pc, #288]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a47      	ldr	r2, [pc, #284]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800023c:	e082      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a48      	ldr	r2, [pc, #288]	@ (8000364 <GPIO_PeriClockControl+0x190>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d106      	bne.n	8000254 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000246:	4b43      	ldr	r3, [pc, #268]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	4a42      	ldr	r2, [pc, #264]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000252:	e077      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a44      	ldr	r2, [pc, #272]	@ (8000368 <GPIO_PeriClockControl+0x194>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d106      	bne.n	800026a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800025c:	4b3d      	ldr	r3, [pc, #244]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a3c      	ldr	r2, [pc, #240]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000268:	e06c      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a3f      	ldr	r2, [pc, #252]	@ (800036c <GPIO_PeriClockControl+0x198>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d106      	bne.n	8000280 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000272:	4b38      	ldr	r3, [pc, #224]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000276:	4a37      	ldr	r2, [pc, #220]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800027c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027e:	e061      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a3b      	ldr	r2, [pc, #236]	@ (8000370 <GPIO_PeriClockControl+0x19c>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d15d      	bne.n	8000344 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a31      	ldr	r2, [pc, #196]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000294:	e056      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a2d      	ldr	r2, [pc, #180]	@ (8000350 <GPIO_PeriClockControl+0x17c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d106      	bne.n	80002ac <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800029e:	4b2d      	ldr	r3, [pc, #180]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002a4:	f023 0301 	bic.w	r3, r3, #1
 80002a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002aa:	e04b      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOB)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000358 <GPIO_PeriClockControl+0x184>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002b4:	4b27      	ldr	r3, [pc, #156]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a26      	ldr	r2, [pc, #152]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002ba:	f023 0302 	bic.w	r3, r3, #2
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c0:	e040      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a25      	ldr	r2, [pc, #148]	@ (800035c <GPIO_PeriClockControl+0x188>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002ca:	4b22      	ldr	r3, [pc, #136]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a21      	ldr	r2, [pc, #132]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002d0:	f023 0304 	bic.w	r3, r3, #4
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d6:	e035      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a21      	ldr	r2, [pc, #132]	@ (8000360 <GPIO_PeriClockControl+0x18c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002e6:	f023 0308 	bic.w	r3, r3, #8
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	e02a      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <GPIO_PeriClockControl+0x190>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002f6:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 80002fc:	f023 0310 	bic.w	r3, r3, #16
 8000300:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000302:	e01f      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a18      	ldr	r2, [pc, #96]	@ (8000368 <GPIO_PeriClockControl+0x194>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000312:	f023 0320 	bic.w	r3, r3, #32
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000318:	e014      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a13      	ldr	r2, [pc, #76]	@ (800036c <GPIO_PeriClockControl+0x198>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a0b      	ldr	r2, [pc, #44]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 8000328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032e:	e009      	b.n	8000344 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <GPIO_PeriClockControl+0x19c>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d105      	bne.n	8000344 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a05      	ldr	r2, [pc, #20]	@ (8000354 <GPIO_PeriClockControl+0x180>)
 800033e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40020000 	.word	0x40020000
 8000354:	40023800 	.word	0x40023800
 8000358:	40020400 	.word	0x40020400
 800035c:	40020800 	.word	0x40020800
 8000360:	40020c00 	.word	0x40020c00
 8000364:	40021000 	.word	0x40021000
 8000368:	40021400 	.word	0x40021400
 800036c:	40021800 	.word	0x40021800
 8000370:	40021c00 	.word	0x40021c00

08000374 <GPIO_Init>:
//2. intilize the port
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint32_t position = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	791b      	ldrb	r3, [r3, #4]
 8000380:	617b      	str	r3, [r7, #20]

	// 1. Enable peripheral clock (assume you have a RCC_EnableGPIOClock() function)
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2101      	movs	r1, #1
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff23 	bl	80001d4 <GPIO_PeriClockControl>

	 // 2. Configure pin mode (MODER)
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode   <=  GPIO_MODE_ANALOG)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	795b      	ldrb	r3, [r3, #5]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d81b      	bhi.n	80003ce <GPIO_Init+0x5a>
	 {
		 pGPIOHandle->pGPIOx->MODER &= ~(0x3U << (2 * position)); // clear
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6819      	ldr	r1, [r3, #0]
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	2203      	movs	r2, #3
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	400a      	ands	r2, r1
 80003ae:	601a      	str	r2, [r3, #0]
		 pGPIOHandle->pGPIOx->MODER |= ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode & 0x3U) << (2 * position));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	f003 0203 	and.w	r2, r3, #3
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	409a      	lsls	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	430a      	orrs	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	e0af      	b.n	800052e <GPIO_Init+0x1ba>
	 }else
	 {
		 //Interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	d117      	bne.n	8000406 <GPIO_Init+0x92>
		 {
			 //1. configure the FTSR
			 EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d6:	4b9a      	ldr	r3, [pc, #616]	@ (8000640 <GPIO_Init+0x2cc>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	7912      	ldrb	r2, [r2, #4]
 80003de:	4611      	mov	r1, r2
 80003e0:	2201      	movs	r2, #1
 80003e2:	408a      	lsls	r2, r1
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a96      	ldr	r2, [pc, #600]	@ (8000640 <GPIO_Init+0x2cc>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]
			 //Clear the corresponding RTSR bit (better for clear corresponding RTSR bit)
			 EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ec:	4b94      	ldr	r3, [pc, #592]	@ (8000640 <GPIO_Init+0x2cc>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	7912      	ldrb	r2, [r2, #4]
 80003f4:	4611      	mov	r1, r2
 80003f6:	2201      	movs	r2, #1
 80003f8:	408a      	lsls	r2, r1
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a90      	ldr	r2, [pc, #576]	@ (8000640 <GPIO_Init+0x2cc>)
 8000400:	400b      	ands	r3, r1
 8000402:	6093      	str	r3, [r2, #8]
 8000404:	e035      	b.n	8000472 <GPIO_Init+0xfe>
		 }else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	795b      	ldrb	r3, [r3, #5]
 800040a:	2b05      	cmp	r3, #5
 800040c:	d117      	bne.n	800043e <GPIO_Init+0xca>
		 {
			 //1 . configure the RTSR
			 EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040e:	4b8c      	ldr	r3, [pc, #560]	@ (8000640 <GPIO_Init+0x2cc>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a88      	ldr	r2, [pc, #544]	@ (8000640 <GPIO_Init+0x2cc>)
 8000420:	430b      	orrs	r3, r1
 8000422:	6093      	str	r3, [r2, #8]
			 //Clear the corresponding FTSR bit
			 EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000424:	4b86      	ldr	r3, [pc, #536]	@ (8000640 <GPIO_Init+0x2cc>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7912      	ldrb	r2, [r2, #4]
 800042c:	4611      	mov	r1, r2
 800042e:	2201      	movs	r2, #1
 8000430:	408a      	lsls	r2, r1
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a82      	ldr	r2, [pc, #520]	@ (8000640 <GPIO_Init+0x2cc>)
 8000438:	400b      	ands	r3, r1
 800043a:	60d3      	str	r3, [r2, #12]
 800043c:	e019      	b.n	8000472 <GPIO_Init+0xfe>
		 }else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	795b      	ldrb	r3, [r3, #5]
 8000442:	2b06      	cmp	r3, #6
 8000444:	d115      	bne.n	8000472 <GPIO_Init+0xfe>
		 {
			//1. configure both FTSR and RTSR
		 	EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000446:	4b7e      	ldr	r3, [pc, #504]	@ (8000640 <GPIO_Init+0x2cc>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	7912      	ldrb	r2, [r2, #4]
 800044e:	4611      	mov	r1, r2
 8000450:	2201      	movs	r2, #1
 8000452:	408a      	lsls	r2, r1
 8000454:	4611      	mov	r1, r2
 8000456:	4a7a      	ldr	r2, [pc, #488]	@ (8000640 <GPIO_Init+0x2cc>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6093      	str	r3, [r2, #8]
		 	EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045c:	4b78      	ldr	r3, [pc, #480]	@ (8000640 <GPIO_Init+0x2cc>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7912      	ldrb	r2, [r2, #4]
 8000464:	4611      	mov	r1, r2
 8000466:	2201      	movs	r2, #1
 8000468:	408a      	lsls	r2, r1
 800046a:	4611      	mov	r1, r2
 800046c:	4a74      	ldr	r2, [pc, #464]	@ (8000640 <GPIO_Init+0x2cc>)
 800046e:	430b      	orrs	r3, r1
 8000470:	60d3      	str	r3, [r2, #12]
		 }
		 //2. configure the GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	089b      	lsrs	r3, r3, #2
 8000478:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	74bb      	strb	r3, [r7, #18]
		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a6e      	ldr	r2, [pc, #440]	@ (8000644 <GPIO_Init+0x2d0>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d032      	beq.n	80004f4 <GPIO_Init+0x180>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a6d      	ldr	r2, [pc, #436]	@ (8000648 <GPIO_Init+0x2d4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d02b      	beq.n	80004f0 <GPIO_Init+0x17c>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a6b      	ldr	r2, [pc, #428]	@ (800064c <GPIO_Init+0x2d8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d024      	beq.n	80004ec <GPIO_Init+0x178>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a6a      	ldr	r2, [pc, #424]	@ (8000650 <GPIO_Init+0x2dc>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d01d      	beq.n	80004e8 <GPIO_Init+0x174>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a68      	ldr	r2, [pc, #416]	@ (8000654 <GPIO_Init+0x2e0>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d016      	beq.n	80004e4 <GPIO_Init+0x170>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a67      	ldr	r2, [pc, #412]	@ (8000658 <GPIO_Init+0x2e4>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d00f      	beq.n	80004e0 <GPIO_Init+0x16c>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a65      	ldr	r2, [pc, #404]	@ (800065c <GPIO_Init+0x2e8>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d008      	beq.n	80004dc <GPIO_Init+0x168>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a64      	ldr	r2, [pc, #400]	@ (8000660 <GPIO_Init+0x2ec>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d101      	bne.n	80004d8 <GPIO_Init+0x164>
 80004d4:	2307      	movs	r3, #7
 80004d6:	e00e      	b.n	80004f6 <GPIO_Init+0x182>
 80004d8:	2300      	movs	r3, #0
 80004da:	e00c      	b.n	80004f6 <GPIO_Init+0x182>
 80004dc:	2306      	movs	r3, #6
 80004de:	e00a      	b.n	80004f6 <GPIO_Init+0x182>
 80004e0:	2305      	movs	r3, #5
 80004e2:	e008      	b.n	80004f6 <GPIO_Init+0x182>
 80004e4:	2304      	movs	r3, #4
 80004e6:	e006      	b.n	80004f6 <GPIO_Init+0x182>
 80004e8:	2303      	movs	r3, #3
 80004ea:	e004      	b.n	80004f6 <GPIO_Init+0x182>
 80004ec:	2302      	movs	r3, #2
 80004ee:	e002      	b.n	80004f6 <GPIO_Init+0x182>
 80004f0:	2301      	movs	r3, #1
 80004f2:	e000      	b.n	80004f6 <GPIO_Init+0x182>
 80004f4:	2300      	movs	r3, #0
 80004f6:	747b      	strb	r3, [r7, #17]
		 SYSCFG_PCLK_EN();
 80004f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000664 <GPIO_Init+0x2f0>)
 80004fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004fc:	4a59      	ldr	r2, [pc, #356]	@ (8000664 <GPIO_Init+0x2f0>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000502:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000504:	7c7a      	ldrb	r2, [r7, #17]
 8000506:	7cbb      	ldrb	r3, [r7, #18]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	fa02 f103 	lsl.w	r1, r2, r3
 800050e:	4a56      	ldr	r2, [pc, #344]	@ (8000668 <GPIO_Init+0x2f4>)
 8000510:	7cfb      	ldrb	r3, [r7, #19]
 8000512:	3302      	adds	r3, #2
 8000514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 //3 . enable the EXIT interrupt delivery using IMR
		 EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000518:	4b49      	ldr	r3, [pc, #292]	@ (8000640 <GPIO_Init+0x2cc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a45      	ldr	r2, [pc, #276]	@ (8000640 <GPIO_Init+0x2cc>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6013      	str	r3, [r2, #0]
	 }
	 // 3. Configure output type (OTYPER)
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1U << position);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6859      	ldr	r1, [r3, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43da      	mvns	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	400a      	ands	r2, r1
 8000544:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << position);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	685a      	ldr	r2, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7a1b      	ldrb	r3, [r3, #8]
 8000550:	4619      	mov	r1, r3
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	430a      	orrs	r2, r1
 8000560:	605a      	str	r2, [r3, #4]

	 // 4. Configure speed (OSPEEDR)
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3U << (2 * position));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6899      	ldr	r1, [r3, #8]
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	2203      	movs	r2, #3
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	43da      	mvns	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	400a      	ands	r2, r1
 800057a:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * position));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	799b      	ldrb	r3, [r3, #6]
 8000586:	4619      	mov	r1, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	430a      	orrs	r2, r1
 8000598:	609a      	str	r2, [r3, #8]

	 // 5. Configure pull-up/pull-down (PUPDR)
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3U << (2 * position));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68d9      	ldr	r1, [r3, #12]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	2203      	movs	r2, #3
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	43da      	mvns	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	400a      	ands	r2, r1
 80005b2:	60da      	str	r2, [r3, #12]
	 pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPd << (2 * position));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	4619      	mov	r1, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]


	 // 6. Configure alternate function (AFRL or AFRH)
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d12e      	bne.n	8000638 <GPIO_Init+0x2c4>
	 {
		 uint32_t afr_index = position / 8;  // 0 = AFRL, 1 = AFRH
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	60fb      	str	r3, [r7, #12]
	     uint32_t afr_pos   = position % 8;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	60bb      	str	r3, [r7, #8]

	     pGPIOHandle->pGPIOx->AFR[afr_index] &= ~(0xFU << (4 * afr_pos));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	3208      	adds	r2, #8
 80005f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	220f      	movs	r2, #15
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4011      	ands	r1, r2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	3208      	adds	r2, #8
 800060a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	     pGPIOHandle->pGPIOx->AFR[afr_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afr_pos));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	3208      	adds	r2, #8
 8000616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7a5b      	ldrb	r3, [r3, #9]
 800061e:	4619      	mov	r1, r3
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	4619      	mov	r1, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4311      	orrs	r1, r2
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	3208      	adds	r2, #8
 8000634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40013c00 	.word	0x40013c00
 8000644:	40020000 	.word	0x40020000
 8000648:	40020400 	.word	0x40020400
 800064c:	40020800 	.word	0x40020800
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40021000 	.word	0x40021000
 8000658:	40021400 	.word	0x40021400
 800065c:	40021800 	.word	0x40021800
 8000660:	40021c00 	.word	0x40021c00
 8000664:	40023800 	.word	0x40023800
 8000668:	40013800 	.word	0x40013800

0800066c <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR  = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	78fa      	ldrb	r2, [r7, #3]
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	405a      	eors	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	615a      	str	r2, [r3, #20]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <RCC_SetAHBPrescaler>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB_PreScaler[4] = { 2, 4 , 8, 16};

static void RCC_SetAHBPrescaler(RCC_AHB_Prescaler_t prescaler)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
    // Clear HPRE[3:0] bits (bits 7:4 of RCC->CFGR)
    RCC->CFGR &= ~(0xF << RCC_CFGR_HPRE);
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <RCC_SetAHBPrescaler+0x30>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <RCC_SetAHBPrescaler+0x30>)
 80006a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006ac:	6093      	str	r3, [r2, #8]
    // Set new prescaler value
    RCC->CFGR |= (prescaler << RCC_CFGR_HPRE);
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <RCC_SetAHBPrescaler+0x30>)
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4904      	ldr	r1, [pc, #16]	@ (80006c8 <RCC_SetAHBPrescaler+0x30>)
 80006b8:	4313      	orrs	r3, r2
 80006ba:	608b      	str	r3, [r1, #8]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800

080006cc <RCC_SetAPB1Prescaler>:

static void RCC_SetAPB1Prescaler(RCC_APB_Prescaler_t prescaler)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    // Clear PPRE1[2:0] bits (bits 10:8)
    RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE1);
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <RCC_SetAPB1Prescaler+0x30>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <RCC_SetAPB1Prescaler+0x30>)
 80006dc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80006e0:	6093      	str	r3, [r2, #8]
    // Set new prescaler
    RCC->CFGR |= (prescaler << RCC_CFGR_PPRE1);
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <RCC_SetAPB1Prescaler+0x30>)
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	029b      	lsls	r3, r3, #10
 80006ea:	4904      	ldr	r1, [pc, #16]	@ (80006fc <RCC_SetAPB1Prescaler+0x30>)
 80006ec:	4313      	orrs	r3, r2
 80006ee:	608b      	str	r3, [r1, #8]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800

08000700 <RCC_SetAPB2Prescaler>:
static void RCC_SetAPB2Prescaler(RCC_APB_Prescaler_t prescaler)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
    // Clear PPRE2[2:0] bits (bits 13:11)
    RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE2);
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <RCC_SetAPB2Prescaler+0x30>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <RCC_SetAPB2Prescaler+0x30>)
 8000710:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000714:	6093      	str	r3, [r2, #8]
    // Set new prescaler
    RCC->CFGR |= (prescaler << RCC_CFGR_PPRE2);
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <RCC_SetAPB2Prescaler+0x30>)
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	035b      	lsls	r3, r3, #13
 800071e:	4904      	ldr	r1, [pc, #16]	@ (8000730 <RCC_SetAPB2Prescaler+0x30>)
 8000720:	4313      	orrs	r3, r2
 8000722:	608b      	str	r3, [r1, #8]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	40023800 	.word	0x40023800

08000734 <RCC_SetSystemClock>:

static void RCC_SetSystemClock(RCC_ClockSource_t clockSource)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
    // Clear SW[1:0] bits (System clock switch)
    RCC->CFGR &= ~(0x3 << RCC_CFGR_SW);
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <RCC_SetSystemClock+0x44>)
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <RCC_SetSystemClock+0x44>)
 8000744:	f023 0303 	bic.w	r3, r3, #3
 8000748:	6093      	str	r3, [r2, #8]

    // Set new clock source
    RCC->CFGR |= (clockSource << RCC_CFGR_SW);
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <RCC_SetSystemClock+0x44>)
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4909      	ldr	r1, [pc, #36]	@ (8000778 <RCC_SetSystemClock+0x44>)
 8000752:	4313      	orrs	r3, r2
 8000754:	608b      	str	r3, [r1, #8]

    // Wait until selected clock source is used as system clock
    while (((RCC->CFGR >> RCC_CFGR_SWS) & 0x3) != clockSource);
 8000756:	bf00      	nop
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <RCC_SetSystemClock+0x44>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	089b      	lsrs	r3, r3, #2
 800075e:	f003 0203 	and.w	r2, r3, #3
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	429a      	cmp	r2, r3
 8000766:	d1f7      	bne.n	8000758 <RCC_SetSystemClock+0x24>
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <RCC_ConfigPLL>:

static void RCC_ConfigPLL(const RCC_PLL_Config_t *pllCfg)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    // 1. Disable PLL before configuring
    RCC->CR &= ~(1 << RCC_CR_PLLON);  // PLLON = 0
 8000784:	4b2a      	ldr	r3, [pc, #168]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a29      	ldr	r2, [pc, #164]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 800078a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800078e:	6013      	str	r3, [r2, #0]
    while (RCC->CR & (1 << RCC_CR_PLLRDY)); // Wait PLLRDY = 0
 8000790:	bf00      	nop
 8000792:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f9      	bne.n	8000792 <RCC_ConfigPLL+0x16>

    // 2. Configure PLL source, M, N, P, Q
    RCC->PLLCFGR = 0;  // Reset first
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR |= (pllCfg->PLL_Source << RCC_PLLCFGR_PLLSRC);        // PLLSRC bit
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	059b      	lsls	r3, r3, #22
 80007ae:	4920      	ldr	r1, [pc, #128]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007b0:	4313      	orrs	r3, r2
 80007b2:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (pllCfg->PLLM & 0x3F) << RCC_PLLCFGR_PLLM;            // PLLM (bits 5:0)
 80007b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80007c0:	491b      	ldr	r1, [pc, #108]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007c2:	4313      	orrs	r3, r2
 80007c4:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (pllCfg->PLLN & 0x1FF) << RCC_PLLCFGR_PLLN;      // PLLN (bits 14:6)
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	885b      	ldrh	r3, [r3, #2]
 80007ce:	0199      	lsls	r1, r3, #6
 80007d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80007d4:	400b      	ands	r3, r1
 80007d6:	4916      	ldr	r1, [pc, #88]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007d8:	4313      	orrs	r3, r2
 80007da:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= ((pllCfg->PLLP >> 1) - 1) << RCC_PLLCFGR_PLLP;  // PLLP (bits 17:16)
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	3b01      	subs	r3, #1
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	4910      	ldr	r1, [pc, #64]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007ee:	4313      	orrs	r3, r2
 80007f0:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (pllCfg->PLLQ & 0x0F) << RCC_PLLCFGR_PLLQ;      // PLLQ (bits 27:24)
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	061b      	lsls	r3, r3, #24
 80007fc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000800:	490b      	ldr	r1, [pc, #44]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 8000802:	4313      	orrs	r3, r2
 8000804:	604b      	str	r3, [r1, #4]

    // 3. Enable PLL
    RCC->CR |= (1 << RCC_CR_PLLON);  // PLLON = 1
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 800080c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000810:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << RCC_CR_PLLRDY))); // Wait until PLLRDY = 1
 8000812:	bf00      	nop
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <RCC_ConfigPLL+0xb4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f9      	beq.n	8000814 <RCC_ConfigPLL+0x98>
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <ClockConfig>:


void ClockConfig(RCC_Config_t *RCC_Init)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

	RCC_ConfigPLL(&RCC_Init->PLL_Config);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3302      	adds	r3, #2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff9b 	bl	800077c <RCC_ConfigPLL>
	RCC_SetSystemClock(RCC_Init->ClockSource);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff72 	bl	8000734 <RCC_SetSystemClock>
	RCC_SetAHBPrescaler(RCC_Init->AHB_Prescaler);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff1f 	bl	8000698 <RCC_SetAHBPrescaler>
	RCC_SetAPB1Prescaler(RCC_Init->APB1_Prescaler);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7a5b      	ldrb	r3, [r3, #9]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff34 	bl	80006cc <RCC_SetAPB1Prescaler>
	RCC_SetAPB2Prescaler(RCC_Init->APB2_Prescaler);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a9b      	ldrb	r3, [r3, #10]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff49 	bl	8000700 <RCC_SetAPB2Prescaler>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <main>:

void GpioConfig(void);


int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	clkConfig();
 800087c:	f000 f80a 	bl	8000894 <_Z9clkConfigv>

	GpioConfig();
 8000880:	f000 f824 	bl	80008cc <_Z10GpioConfigv>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_0);
 8000884:	2100      	movs	r1, #0
 8000886:	4802      	ldr	r0, [pc, #8]	@ (8000890 <main+0x18>)
 8000888:	f7ff fef0 	bl	800066c <GPIO_ToggleOutputPin>
 800088c:	e7fa      	b.n	8000884 <main+0xc>
 800088e:	bf00      	nop
 8000890:	40020000 	.word	0x40020000

08000894 <_Z9clkConfigv>:

	return 0;

}
void clkConfig(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
	RCC_Config_t RCC_Config;

	RCC_Config.PLL_Config.PLL_Source = RCC_PLLSRC_HSI;
 800089a:	2300      	movs	r3, #0
 800089c:	71bb      	strb	r3, [r7, #6]
	RCC_Config.PLL_Config.PLLM = 16;
 800089e:	2310      	movs	r3, #16
 80008a0:	71fb      	strb	r3, [r7, #7]
	RCC_Config.PLL_Config.PLLN =168;
 80008a2:	23a8      	movs	r3, #168	@ 0xa8
 80008a4:	813b      	strh	r3, [r7, #8]
	RCC_Config.PLL_Config.PLLP =2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	72bb      	strb	r3, [r7, #10]
	RCC_Config.ClockSource = RCC_CLOCK_PLL;
 80008aa:	2302      	movs	r3, #2
 80008ac:	713b      	strb	r3, [r7, #4]
	RCC_Config.AHB_Prescaler = RCC_AHB_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	733b      	strb	r3, [r7, #12]
	RCC_Config.APB1_Prescaler = RCC_APB_DIV2;
 80008b2:	2304      	movs	r3, #4
 80008b4:	737b      	strb	r3, [r7, #13]
	RCC_Config.APB2_Prescaler = RCC_APB_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73bb      	strb	r3, [r7, #14]

	ClockConfig(&RCC_Config);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ffb9 	bl	8000834 <ClockConfig>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <_Z10GpioConfigv>:

void GpioConfig(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

		GpioLed.pGPIOx = GPIOA;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <_Z10GpioConfigv+0x30>)
 80008d4:	607b      	str	r3, [r7, #4]
		GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	723b      	strb	r3, [r7, #8]
		GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008da:	2301      	movs	r3, #1
 80008dc:	727b      	strb	r3, [r7, #9]
		GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008de:	2302      	movs	r3, #2
 80008e0:	72bb      	strb	r3, [r7, #10]
		GpioLed.GPIO_PinConfig.GPIO_PinPuPd = GPIO_NO_PUPD;
 80008e2:	2300      	movs	r3, #0
 80008e4:	72fb      	strb	r3, [r7, #11]
		GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80008e6:	2300      	movs	r3, #0
 80008e8:	733b      	strb	r3, [r7, #12]

		GPIO_Init(&GpioLed);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fd41 	bl	8000374 <GPIO_Init>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40020000 	.word	0x40020000

08000900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000904:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	@ (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	@ (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800092e:	f000 f811 	bl	8000954 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000932:	f7ff ffa1 	bl	8000878 <main>

08000936 <LoopForever>:

LoopForever:
  b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000944:	080009bc 	.word	0x080009bc
  ldr r2, =_sbss
 8000948:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800094c:	2000001c 	.word	0x2000001c

08000950 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC_IRQHandler>
	...

08000954 <__libc_init_array>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4d0d      	ldr	r5, [pc, #52]	@ (800098c <__libc_init_array+0x38>)
 8000958:	4c0d      	ldr	r4, [pc, #52]	@ (8000990 <__libc_init_array+0x3c>)
 800095a:	1b64      	subs	r4, r4, r5
 800095c:	10a4      	asrs	r4, r4, #2
 800095e:	2600      	movs	r6, #0
 8000960:	42a6      	cmp	r6, r4
 8000962:	d109      	bne.n	8000978 <__libc_init_array+0x24>
 8000964:	4d0b      	ldr	r5, [pc, #44]	@ (8000994 <__libc_init_array+0x40>)
 8000966:	4c0c      	ldr	r4, [pc, #48]	@ (8000998 <__libc_init_array+0x44>)
 8000968:	f000 f818 	bl	800099c <_init>
 800096c:	1b64      	subs	r4, r4, r5
 800096e:	10a4      	asrs	r4, r4, #2
 8000970:	2600      	movs	r6, #0
 8000972:	42a6      	cmp	r6, r4
 8000974:	d105      	bne.n	8000982 <__libc_init_array+0x2e>
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f855 3b04 	ldr.w	r3, [r5], #4
 800097c:	4798      	blx	r3
 800097e:	3601      	adds	r6, #1
 8000980:	e7ee      	b.n	8000960 <__libc_init_array+0xc>
 8000982:	f855 3b04 	ldr.w	r3, [r5], #4
 8000986:	4798      	blx	r3
 8000988:	3601      	adds	r6, #1
 800098a:	e7f2      	b.n	8000972 <__libc_init_array+0x1e>
 800098c:	080009b4 	.word	0x080009b4
 8000990:	080009b4 	.word	0x080009b4
 8000994:	080009b4 	.word	0x080009b4
 8000998:	080009b8 	.word	0x080009b8

0800099c <_init>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	bf00      	nop
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr

080009a8 <_fini>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	bf00      	nop
 80009ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ae:	bc08      	pop	{r3}
 80009b0:	469e      	mov	lr, r3
 80009b2:	4770      	bx	lr

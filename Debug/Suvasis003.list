
Suvasis003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000864  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f8  08000a00  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f8  080009f8  00001a00  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009f8  080009f8  00001a00  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009f8  08000a00  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f8  080009f8  000019f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009fc  080009fc  000019fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a00  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a00  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001502  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044e  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00003380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000db  00000000  00000000  000034b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029f4  00000000  00000000  00003593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016f9  00000000  00000000  00005f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000077a5  00000000  00000000  00007680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ee25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000041c  00000000  00000000  0000ee68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080009e0 	.word	0x080009e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080009e0 	.word	0x080009e0

080001d4 <GPIO_PeriClockControl>:
---------------------------------------------------------------------------------------------------------------*/
#include "stm32f401re_gpio.h"

//1. enable clock using calling the macro which is deined in header file
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 80001e0:	78fb      	ldrb	r3, [r7, #3]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d162      	bne.n	80002ac <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx==GPIOA)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a64      	ldr	r2, [pc, #400]	@ (800037c <GPIO_PeriClockControl+0x1a8>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d106      	bne.n	80001fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001ee:	4b64      	ldr	r3, [pc, #400]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	4a63      	ldr	r2, [pc, #396]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DI();
		}
	}


}
 80001fa:	e0b9      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOB)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a61      	ldr	r2, [pc, #388]	@ (8000384 <GPIO_PeriClockControl+0x1b0>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d106      	bne.n	8000212 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000204:	4b5e      	ldr	r3, [pc, #376]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a5d      	ldr	r2, [pc, #372]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000210:	e0ae      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a5c      	ldr	r2, [pc, #368]	@ (8000388 <GPIO_PeriClockControl+0x1b4>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d106      	bne.n	8000228 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800021a:	4b59      	ldr	r3, [pc, #356]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a58      	ldr	r2, [pc, #352]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000226:	e0a3      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a58      	ldr	r2, [pc, #352]	@ (800038c <GPIO_PeriClockControl+0x1b8>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d106      	bne.n	800023e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000230:	4b53      	ldr	r3, [pc, #332]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a52      	ldr	r2, [pc, #328]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800023c:	e098      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a53      	ldr	r2, [pc, #332]	@ (8000390 <GPIO_PeriClockControl+0x1bc>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d106      	bne.n	8000254 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000246:	4b4e      	ldr	r3, [pc, #312]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	4a4d      	ldr	r2, [pc, #308]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000252:	e08d      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a4f      	ldr	r2, [pc, #316]	@ (8000394 <GPIO_PeriClockControl+0x1c0>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d106      	bne.n	800026a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800025c:	4b48      	ldr	r3, [pc, #288]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a47      	ldr	r2, [pc, #284]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000268:	e082      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a4a      	ldr	r2, [pc, #296]	@ (8000398 <GPIO_PeriClockControl+0x1c4>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d106      	bne.n	8000280 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000272:	4b43      	ldr	r3, [pc, #268]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000276:	4a42      	ldr	r2, [pc, #264]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800027c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027e:	e077      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a46      	ldr	r2, [pc, #280]	@ (800039c <GPIO_PeriClockControl+0x1c8>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d106      	bne.n	8000296 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000288:	4b3d      	ldr	r3, [pc, #244]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a3c      	ldr	r2, [pc, #240]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000294:	e06c      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a41      	ldr	r2, [pc, #260]	@ (80003a0 <GPIO_PeriClockControl+0x1cc>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d168      	bne.n	8000370 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800029e:	4b38      	ldr	r3, [pc, #224]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a2:	4a37      	ldr	r2, [pc, #220]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002aa:	e061      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx==GPIOA)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a33      	ldr	r2, [pc, #204]	@ (800037c <GPIO_PeriClockControl+0x1a8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002b4:	4b32      	ldr	r3, [pc, #200]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a31      	ldr	r2, [pc, #196]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c0:	e056      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx==GPIOB)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000384 <GPIO_PeriClockControl+0x1b0>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002d0:	f023 0302 	bic.w	r3, r3, #2
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d6:	e04b      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a2b      	ldr	r2, [pc, #172]	@ (8000388 <GPIO_PeriClockControl+0x1b4>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002e0:	4b27      	ldr	r3, [pc, #156]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a26      	ldr	r2, [pc, #152]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002e6:	f023 0304 	bic.w	r3, r3, #4
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	e040      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a26      	ldr	r2, [pc, #152]	@ (800038c <GPIO_PeriClockControl+0x1b8>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80002f6:	4b22      	ldr	r3, [pc, #136]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	4a21      	ldr	r2, [pc, #132]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 80002fc:	f023 0308 	bic.w	r3, r3, #8
 8000300:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000302:	e035      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a22      	ldr	r2, [pc, #136]	@ (8000390 <GPIO_PeriClockControl+0x1bc>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800030c:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a1b      	ldr	r2, [pc, #108]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000312:	f023 0310 	bic.w	r3, r3, #16
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000318:	e02a      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <GPIO_PeriClockControl+0x1c0>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000322:	4b17      	ldr	r3, [pc, #92]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a16      	ldr	r2, [pc, #88]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000328:	f023 0320 	bic.w	r3, r3, #32
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032e:	e01f      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a19      	ldr	r2, [pc, #100]	@ (8000398 <GPIO_PeriClockControl+0x1c4>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000338:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a10      	ldr	r2, [pc, #64]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800033e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000344:	e014      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a14      	ldr	r2, [pc, #80]	@ (800039c <GPIO_PeriClockControl+0x1c8>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800034e:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a0b      	ldr	r2, [pc, #44]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035a:	e009      	b.n	8000370 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a10      	ldr	r2, [pc, #64]	@ (80003a0 <GPIO_PeriClockControl+0x1cc>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d105      	bne.n	8000370 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <GPIO_PeriClockControl+0x1ac>)
 800036a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40020000 	.word	0x40020000
 8000380:	40023800 	.word	0x40023800
 8000384:	40020400 	.word	0x40020400
 8000388:	40020800 	.word	0x40020800
 800038c:	40020c00 	.word	0x40020c00
 8000390:	40021000 	.word	0x40021000
 8000394:	40021400 	.word	0x40021400
 8000398:	40021800 	.word	0x40021800
 800039c:	40021c00 	.word	0x40021c00
 80003a0:	40022000 	.word	0x40022000

080003a4 <GPIO_Init>:
//2. intilize the port
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	uint32_t position = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	617b      	str	r3, [r7, #20]

	// 1. Enable peripheral clock (assume you have a RCC_EnableGPIOClock() function)
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2101      	movs	r1, #1
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff0b 	bl	80001d4 <GPIO_PeriClockControl>

	 // 2. Configure pin mode (MODER)
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode   <=  GPIO_MODE_ANALOG)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	795b      	ldrb	r3, [r3, #5]
 80003c2:	2b03      	cmp	r3, #3
 80003c4:	d81b      	bhi.n	80003fe <GPIO_Init+0x5a>
	 {
		 pGPIOHandle->pGPIOx->MODER &= ~(0x3U << (2 * position)); // clear
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	2203      	movs	r2, #3
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43da      	mvns	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	400a      	ands	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
		 pGPIOHandle->pGPIOx->MODER |= ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode & 0x3U) << (2 * position));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	6819      	ldr	r1, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	795b      	ldrb	r3, [r3, #5]
 80003ea:	f003 0203 	and.w	r2, r3, #3
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	409a      	lsls	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	e0b6      	b.n	800056c <GPIO_Init+0x1c8>
	 }else
	 {
		 //Interrupt mode
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	795b      	ldrb	r3, [r3, #5]
 8000402:	2b04      	cmp	r3, #4
 8000404:	d117      	bne.n	8000436 <GPIO_Init+0x92>
		 {
			 //1. configure the FTSR
			 EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000406:	4b9e      	ldr	r3, [pc, #632]	@ (8000680 <GPIO_Init+0x2dc>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	7912      	ldrb	r2, [r2, #4]
 800040e:	4611      	mov	r1, r2
 8000410:	2201      	movs	r2, #1
 8000412:	408a      	lsls	r2, r1
 8000414:	4611      	mov	r1, r2
 8000416:	4a9a      	ldr	r2, [pc, #616]	@ (8000680 <GPIO_Init+0x2dc>)
 8000418:	430b      	orrs	r3, r1
 800041a:	60d3      	str	r3, [r2, #12]
			 //Clear the corresponding RTSR bit (better for clear corresponding RTSR bit)
			 EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041c:	4b98      	ldr	r3, [pc, #608]	@ (8000680 <GPIO_Init+0x2dc>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7912      	ldrb	r2, [r2, #4]
 8000424:	4611      	mov	r1, r2
 8000426:	2201      	movs	r2, #1
 8000428:	408a      	lsls	r2, r1
 800042a:	43d2      	mvns	r2, r2
 800042c:	4611      	mov	r1, r2
 800042e:	4a94      	ldr	r2, [pc, #592]	@ (8000680 <GPIO_Init+0x2dc>)
 8000430:	400b      	ands	r3, r1
 8000432:	6093      	str	r3, [r2, #8]
 8000434:	e035      	b.n	80004a2 <GPIO_Init+0xfe>
		 }else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	795b      	ldrb	r3, [r3, #5]
 800043a:	2b05      	cmp	r3, #5
 800043c:	d117      	bne.n	800046e <GPIO_Init+0xca>
		 {
			 //1 . configure the RTSR
			 EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043e:	4b90      	ldr	r3, [pc, #576]	@ (8000680 <GPIO_Init+0x2dc>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7912      	ldrb	r2, [r2, #4]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	4611      	mov	r1, r2
 800044e:	4a8c      	ldr	r2, [pc, #560]	@ (8000680 <GPIO_Init+0x2dc>)
 8000450:	430b      	orrs	r3, r1
 8000452:	6093      	str	r3, [r2, #8]
			 //Clear the corresponding FTSR bit
			 EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000454:	4b8a      	ldr	r3, [pc, #552]	@ (8000680 <GPIO_Init+0x2dc>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	43d2      	mvns	r2, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a86      	ldr	r2, [pc, #536]	@ (8000680 <GPIO_Init+0x2dc>)
 8000468:	400b      	ands	r3, r1
 800046a:	60d3      	str	r3, [r2, #12]
 800046c:	e019      	b.n	80004a2 <GPIO_Init+0xfe>
		 }else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	2b06      	cmp	r3, #6
 8000474:	d115      	bne.n	80004a2 <GPIO_Init+0xfe>
		 {
			//1. configure both FTSR and RTSR
		 	EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000476:	4b82      	ldr	r3, [pc, #520]	@ (8000680 <GPIO_Init+0x2dc>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7912      	ldrb	r2, [r2, #4]
 800047e:	4611      	mov	r1, r2
 8000480:	2201      	movs	r2, #1
 8000482:	408a      	lsls	r2, r1
 8000484:	4611      	mov	r1, r2
 8000486:	4a7e      	ldr	r2, [pc, #504]	@ (8000680 <GPIO_Init+0x2dc>)
 8000488:	430b      	orrs	r3, r1
 800048a:	6093      	str	r3, [r2, #8]
		 	EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800048c:	4b7c      	ldr	r3, [pc, #496]	@ (8000680 <GPIO_Init+0x2dc>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7912      	ldrb	r2, [r2, #4]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	4611      	mov	r1, r2
 800049c:	4a78      	ldr	r2, [pc, #480]	@ (8000680 <GPIO_Init+0x2dc>)
 800049e:	430b      	orrs	r3, r1
 80004a0:	60d3      	str	r3, [r2, #12]
		 }
		 //2. configure the GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	089b      	lsrs	r3, r3, #2
 80004a8:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	f003 0303 	and.w	r3, r3, #3
 80004b2:	74bb      	strb	r3, [r7, #18]
		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a72      	ldr	r2, [pc, #456]	@ (8000684 <GPIO_Init+0x2e0>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d039      	beq.n	8000532 <GPIO_Init+0x18e>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a71      	ldr	r2, [pc, #452]	@ (8000688 <GPIO_Init+0x2e4>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d032      	beq.n	800052e <GPIO_Init+0x18a>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a6f      	ldr	r2, [pc, #444]	@ (800068c <GPIO_Init+0x2e8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d02b      	beq.n	800052a <GPIO_Init+0x186>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a6e      	ldr	r2, [pc, #440]	@ (8000690 <GPIO_Init+0x2ec>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d024      	beq.n	8000526 <GPIO_Init+0x182>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a6c      	ldr	r2, [pc, #432]	@ (8000694 <GPIO_Init+0x2f0>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d01d      	beq.n	8000522 <GPIO_Init+0x17e>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a6b      	ldr	r2, [pc, #428]	@ (8000698 <GPIO_Init+0x2f4>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <GPIO_Init+0x17a>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a69      	ldr	r2, [pc, #420]	@ (800069c <GPIO_Init+0x2f8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d00f      	beq.n	800051a <GPIO_Init+0x176>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a68      	ldr	r2, [pc, #416]	@ (80006a0 <GPIO_Init+0x2fc>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d008      	beq.n	8000516 <GPIO_Init+0x172>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a66      	ldr	r2, [pc, #408]	@ (80006a4 <GPIO_Init+0x300>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d101      	bne.n	8000512 <GPIO_Init+0x16e>
 800050e:	2308      	movs	r3, #8
 8000510:	e010      	b.n	8000534 <GPIO_Init+0x190>
 8000512:	2300      	movs	r3, #0
 8000514:	e00e      	b.n	8000534 <GPIO_Init+0x190>
 8000516:	2307      	movs	r3, #7
 8000518:	e00c      	b.n	8000534 <GPIO_Init+0x190>
 800051a:	2306      	movs	r3, #6
 800051c:	e00a      	b.n	8000534 <GPIO_Init+0x190>
 800051e:	2305      	movs	r3, #5
 8000520:	e008      	b.n	8000534 <GPIO_Init+0x190>
 8000522:	2304      	movs	r3, #4
 8000524:	e006      	b.n	8000534 <GPIO_Init+0x190>
 8000526:	2303      	movs	r3, #3
 8000528:	e004      	b.n	8000534 <GPIO_Init+0x190>
 800052a:	2302      	movs	r3, #2
 800052c:	e002      	b.n	8000534 <GPIO_Init+0x190>
 800052e:	2301      	movs	r3, #1
 8000530:	e000      	b.n	8000534 <GPIO_Init+0x190>
 8000532:	2300      	movs	r3, #0
 8000534:	747b      	strb	r3, [r7, #17]
		 SYSCFG_PCLK_EN();
 8000536:	4b5c      	ldr	r3, [pc, #368]	@ (80006a8 <GPIO_Init+0x304>)
 8000538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800053a:	4a5b      	ldr	r2, [pc, #364]	@ (80006a8 <GPIO_Init+0x304>)
 800053c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000540:	6453      	str	r3, [r2, #68]	@ 0x44
		 SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000542:	7c7a      	ldrb	r2, [r7, #17]
 8000544:	7cbb      	ldrb	r3, [r7, #18]
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	fa02 f103 	lsl.w	r1, r2, r3
 800054c:	4a57      	ldr	r2, [pc, #348]	@ (80006ac <GPIO_Init+0x308>)
 800054e:	7cfb      	ldrb	r3, [r7, #19]
 8000550:	3302      	adds	r3, #2
 8000552:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 //3 . enable the EXIT interrupt delivery using IMR
		 EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000556:	4b4a      	ldr	r3, [pc, #296]	@ (8000680 <GPIO_Init+0x2dc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a46      	ldr	r2, [pc, #280]	@ (8000680 <GPIO_Init+0x2dc>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
	 }
	 // 3. Configure output type (OTYPER)
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x1U << position);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6859      	ldr	r1, [r3, #4]
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43da      	mvns	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	400a      	ands	r2, r1
 8000582:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << position);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7a1b      	ldrb	r3, [r3, #8]
 800058e:	4619      	mov	r1, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	430a      	orrs	r2, r1
 800059e:	605a      	str	r2, [r3, #4]

	 // 4. Configure speed (OSPEEDR)
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3U << (2 * position));
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6899      	ldr	r1, [r3, #8]
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2203      	movs	r2, #3
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	43da      	mvns	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * position));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	799b      	ldrb	r3, [r3, #6]
 80005c4:	4619      	mov	r1, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	609a      	str	r2, [r3, #8]

	 // 5. Configure pull-up/pull-down (PUPDR)
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x3U << (2 * position));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68d9      	ldr	r1, [r3, #12]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2203      	movs	r2, #3
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	43da      	mvns	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	400a      	ands	r2, r1
 80005f0:	60da      	str	r2, [r3, #12]
	 pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPd << (2 * position));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68da      	ldr	r2, [r3, #12]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	79db      	ldrb	r3, [r3, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	430a      	orrs	r2, r1
 800060e:	60da      	str	r2, [r3, #12]


	 // 6. Configure alternate function (AFRL or AFRH)
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	795b      	ldrb	r3, [r3, #5]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d12e      	bne.n	8000676 <GPIO_Init+0x2d2>
	 {
		 uint32_t afr_index = position / 8;  // 0 = AFRL, 1 = AFRH
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	60fb      	str	r3, [r7, #12]
	     uint32_t afr_pos   = position % 8;
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	60bb      	str	r3, [r7, #8]

	     pGPIOHandle->pGPIOx->AFR[afr_index] &= ~(0xFU << (4 * afr_pos));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	3208      	adds	r2, #8
 800062e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	220f      	movs	r2, #15
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	43da      	mvns	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4011      	ands	r1, r2
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	3208      	adds	r2, #8
 8000648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	     pGPIOHandle->pGPIOx->AFR[afr_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afr_pos));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	3208      	adds	r2, #8
 8000654:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7a5b      	ldrb	r3, [r3, #9]
 800065c:	4619      	mov	r1, r3
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	fa01 f303 	lsl.w	r3, r1, r3
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4311      	orrs	r1, r2
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	3208      	adds	r2, #8
 8000672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40013c00 	.word	0x40013c00
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40021000 	.word	0x40021000
 8000698:	40021400 	.word	0x40021400
 800069c:	40021800 	.word	0x40021800
 80006a0:	40021c00 	.word	0x40021c00
 80006a4:	40022000 	.word	0x40022000
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800

080006b0 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR  = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	78fa      	ldrb	r2, [r7, #3]
 80006c2:	2101      	movs	r1, #1
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	405a      	eors	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	615a      	str	r2, [r3, #20]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <RCC_SetAHBPrescaler>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB_PreScaler[4] = { 2, 4 , 8, 16};

static void RCC_SetAHBPrescaler(RCC_AHB_Prescaler_t prescaler)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    // Clear HPRE[3:0] bits (bits 7:4 of RCC->CFGR)
    RCC->CFGR &= ~(0xF << RCC_CFGR_HPRE);
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <RCC_SetAHBPrescaler+0x30>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <RCC_SetAHBPrescaler+0x30>)
 80006ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006f0:	6093      	str	r3, [r2, #8]
    // Set new prescaler value
    RCC->CFGR |= (prescaler << RCC_CFGR_HPRE);
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <RCC_SetAHBPrescaler+0x30>)
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4904      	ldr	r1, [pc, #16]	@ (800070c <RCC_SetAHBPrescaler+0x30>)
 80006fc:	4313      	orrs	r3, r2
 80006fe:	608b      	str	r3, [r1, #8]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40023800 	.word	0x40023800

08000710 <RCC_SetAPB1Prescaler>:

static void RCC_SetAPB1Prescaler(RCC_APB_Prescaler_t prescaler)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
    // Clear PPRE1[2:0] bits (bits 10:8)
    RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE1);
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <RCC_SetAPB1Prescaler+0x30>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <RCC_SetAPB1Prescaler+0x30>)
 8000720:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000724:	6093      	str	r3, [r2, #8]
    // Set new prescaler
    RCC->CFGR |= (prescaler << RCC_CFGR_PPRE1);
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <RCC_SetAPB1Prescaler+0x30>)
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	029b      	lsls	r3, r3, #10
 800072e:	4904      	ldr	r1, [pc, #16]	@ (8000740 <RCC_SetAPB1Prescaler+0x30>)
 8000730:	4313      	orrs	r3, r2
 8000732:	608b      	str	r3, [r1, #8]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40023800 	.word	0x40023800

08000744 <RCC_SetAPB2Prescaler>:
static void RCC_SetAPB2Prescaler(RCC_APB_Prescaler_t prescaler)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
    // Clear PPRE2[2:0] bits (bits 13:11)
    RCC->CFGR &= ~(0x7 << RCC_CFGR_PPRE2);
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <RCC_SetAPB2Prescaler+0x30>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <RCC_SetAPB2Prescaler+0x30>)
 8000754:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000758:	6093      	str	r3, [r2, #8]
    // Set new prescaler
    RCC->CFGR |= (prescaler << RCC_CFGR_PPRE2);
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <RCC_SetAPB2Prescaler+0x30>)
 800075c:	689a      	ldr	r2, [r3, #8]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	035b      	lsls	r3, r3, #13
 8000762:	4904      	ldr	r1, [pc, #16]	@ (8000774 <RCC_SetAPB2Prescaler+0x30>)
 8000764:	4313      	orrs	r3, r2
 8000766:	608b      	str	r3, [r1, #8]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40023800 	.word	0x40023800

08000778 <RCC_SetSystemClock>:

static void RCC_SetSystemClock(RCC_ClockSource_t clockSource)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    // Clear SW[1:0] bits (System clock switch)
    RCC->CFGR &= ~(0x3 << RCC_CFGR_SW);
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <RCC_SetSystemClock+0x44>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <RCC_SetSystemClock+0x44>)
 8000788:	f023 0303 	bic.w	r3, r3, #3
 800078c:	6093      	str	r3, [r2, #8]

    // Set new clock source
    RCC->CFGR |= (clockSource << RCC_CFGR_SW);
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <RCC_SetSystemClock+0x44>)
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4909      	ldr	r1, [pc, #36]	@ (80007bc <RCC_SetSystemClock+0x44>)
 8000796:	4313      	orrs	r3, r2
 8000798:	608b      	str	r3, [r1, #8]

    // Wait until selected clock source is used as system clock
    while (((RCC->CFGR >> RCC_CFGR_SWS) & 0x3) != clockSource);
 800079a:	bf00      	nop
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <RCC_SetSystemClock+0x44>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	089b      	lsrs	r3, r3, #2
 80007a2:	f003 0203 	and.w	r2, r3, #3
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d1f7      	bne.n	800079c <RCC_SetSystemClock+0x24>
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <RCC_ConfigPLL>:

static void RCC_ConfigPLL(const RCC_PLL_Config_t *pllCfg)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    // 1. Disable PLL before configuring
    RCC->CR &= ~(1 << RCC_CR_PLLON);  // PLLON = 0
 80007c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007d2:	6013      	str	r3, [r2, #0]
    while (RCC->CR & (1 << RCC_CR_PLLRDY)); // Wait PLLRDY = 0
 80007d4:	bf00      	nop
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f9      	bne.n	80007d6 <RCC_ConfigPLL+0x16>

    // 2. Configure PLL source, M, N, P, Q
    RCC->PLLCFGR = 0;  // Reset first
 80007e2:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR |= (pllCfg->PLL_Source << RCC_PLLCFGR_PLLSRC);        // PLLSRC bit
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	059b      	lsls	r3, r3, #22
 80007f2:	4920      	ldr	r1, [pc, #128]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (pllCfg->PLLM & 0x3F) << RCC_PLLCFGR_PLLM;            // PLLM (bits 5:0)
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	785b      	ldrb	r3, [r3, #1]
 8000800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000804:	491b      	ldr	r1, [pc, #108]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 8000806:	4313      	orrs	r3, r2
 8000808:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (pllCfg->PLLN & 0x1FF) << RCC_PLLCFGR_PLLN;      // PLLN (bits 14:6)
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	885b      	ldrh	r3, [r3, #2]
 8000812:	0199      	lsls	r1, r3, #6
 8000814:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000818:	400b      	ands	r3, r1
 800081a:	4916      	ldr	r1, [pc, #88]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 800081c:	4313      	orrs	r3, r2
 800081e:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= ((pllCfg->PLLP >> 1) - 1) << RCC_PLLCFGR_PLLP;  // PLLP (bits 17:16)
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3b01      	subs	r3, #1
 800082e:	041b      	lsls	r3, r3, #16
 8000830:	4910      	ldr	r1, [pc, #64]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 8000832:	4313      	orrs	r3, r2
 8000834:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (pllCfg->PLLQ & 0x0F) << RCC_PLLCFGR_PLLQ;      // PLLQ (bits 27:24)
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	795b      	ldrb	r3, [r3, #5]
 800083e:	061b      	lsls	r3, r3, #24
 8000840:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000844:	490b      	ldr	r1, [pc, #44]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 8000846:	4313      	orrs	r3, r2
 8000848:	604b      	str	r3, [r1, #4]

    // 3. Enable PLL
    RCC->CR |= (1 << RCC_CR_PLLON);  // PLLON = 1
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 8000850:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000854:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << RCC_CR_PLLRDY))); // Wait until PLLRDY = 1
 8000856:	bf00      	nop
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <RCC_ConfigPLL+0xb4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0f9      	beq.n	8000858 <RCC_ConfigPLL+0x98>
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <ClockConfig>:


void ClockConfig(RCC_Config_t *RCC_Init)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	RCC_ConfigPLL(&RCC_Init->PLL_Config);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3302      	adds	r3, #2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff9b 	bl	80007c0 <RCC_ConfigPLL>
	RCC_SetSystemClock(RCC_Init->ClockSource);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff72 	bl	8000778 <RCC_SetSystemClock>
	RCC_SetAHBPrescaler(RCC_Init->AHB_Prescaler);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7a1b      	ldrb	r3, [r3, #8]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff1f 	bl	80006dc <RCC_SetAHBPrescaler>
	RCC_SetAPB1Prescaler(RCC_Init->APB1_Prescaler);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7a5b      	ldrb	r3, [r3, #9]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff34 	bl	8000710 <RCC_SetAPB1Prescaler>
	RCC_SetAPB2Prescaler(RCC_Init->APB2_Prescaler);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7a9b      	ldrb	r3, [r3, #10]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff49 	bl	8000744 <RCC_SetAPB2Prescaler>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <main>:

void GpioConfig(void);


int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	clkConfig();
 80008c0:	f000 f80a 	bl	80008d8 <_Z9clkConfigv>

	GpioConfig();
 80008c4:	f000 f824 	bl	8000910 <_Z10GpioConfigv>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <main+0x18>)
 80008cc:	f7ff fef0 	bl	80006b0 <GPIO_ToggleOutputPin>
 80008d0:	e7fa      	b.n	80008c8 <main+0xc>
 80008d2:	bf00      	nop
 80008d4:	40020000 	.word	0x40020000

080008d8 <_Z9clkConfigv>:

	return 0;

}
void clkConfig(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
	RCC_Config_t RCC_Config;

	RCC_Config.PLL_Config.PLL_Source = RCC_PLLSRC_HSI;
 80008de:	2300      	movs	r3, #0
 80008e0:	71bb      	strb	r3, [r7, #6]
	RCC_Config.PLL_Config.PLLM = 16;
 80008e2:	2310      	movs	r3, #16
 80008e4:	71fb      	strb	r3, [r7, #7]
	RCC_Config.PLL_Config.PLLN =168;
 80008e6:	23a8      	movs	r3, #168	@ 0xa8
 80008e8:	813b      	strh	r3, [r7, #8]
	RCC_Config.PLL_Config.PLLP =2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	72bb      	strb	r3, [r7, #10]
	RCC_Config.ClockSource = RCC_CLOCK_PLL;
 80008ee:	2302      	movs	r3, #2
 80008f0:	713b      	strb	r3, [r7, #4]
	RCC_Config.AHB_Prescaler = RCC_AHB_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	733b      	strb	r3, [r7, #12]
	RCC_Config.APB1_Prescaler = RCC_APB_DIV2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	737b      	strb	r3, [r7, #13]
	RCC_Config.APB2_Prescaler = RCC_APB_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73bb      	strb	r3, [r7, #14]

	ClockConfig(&RCC_Config);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ffb9 	bl	8000878 <ClockConfig>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <_Z10GpioConfigv>:

void GpioConfig(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

		GpioLed.pGPIOx = GPIOA;
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <_Z10GpioConfigv+0x30>)
 8000918:	607b      	str	r3, [r7, #4]
		GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800091a:	2300      	movs	r3, #0
 800091c:	723b      	strb	r3, [r7, #8]
		GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800091e:	2301      	movs	r3, #1
 8000920:	727b      	strb	r3, [r7, #9]
		GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000922:	2302      	movs	r3, #2
 8000924:	72bb      	strb	r3, [r7, #10]
		GpioLed.GPIO_PinConfig.GPIO_PinPuPd = GPIO_NO_PUPD;
 8000926:	2300      	movs	r3, #0
 8000928:	72fb      	strb	r3, [r7, #11]
		GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800092a:	2300      	movs	r3, #0
 800092c:	733b      	strb	r3, [r7, #12]

		GPIO_Init(&GpioLed);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fd37 	bl	80003a4 <GPIO_Init>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020000 	.word	0x40020000

08000944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000948:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000972:	f000 f811 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000976:	f7ff ffa1 	bl	80008bc <main>

0800097a <LoopForever>:

LoopForever:
  b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   r0, =_estack
 800097c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000988:	08000a00 	.word	0x08000a00
  ldr r2, =_sbss
 800098c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000990:	2000001c 	.word	0x2000001c

08000994 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	@ (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	@ (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	@ (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	@ (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f818 	bl	80009e0 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	080009f8 	.word	0x080009f8
 80009d4:	080009f8 	.word	0x080009f8
 80009d8:	080009f8 	.word	0x080009f8
 80009dc:	080009fc 	.word	0x080009fc

080009e0 <_init>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr

080009ec <_fini>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr
